{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"workspaceName": {
			"type": "string",
			"metadata": "Workspace name",
			"defaultValue": "syn-oea-agtest"
		},
		"LS_SQL_Serverless_OEA_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'LS_SQL_Serverless_OEA'"
		},
		"syn-oea-agtest-WorkspaceDefaultSqlServer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'syn-oea-agtest-WorkspaceDefaultSqlServer'"
		},
		"LS_ADLS_OEA_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://stoeacisdedfi1.dfs.core.windows.net/"
		},
		"LS_HTTP_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "@{linkedService().baseURL}"
		},
		"LS_HTTP_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "@{linkedService().clientID}"
		},
		"LS_KeyVault_OEA_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://kv-oea-cisd-edfi1.vault.azure.net/"
		},
		"LS_REST_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "@{linkedService().BaseURL}"
		},
		"LS_REST_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "@{linkedService().ClientId}"
		},
		"syn-oea-agtest-WorkspaceDefaultStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://stoeaagtest.dfs.core.windows.net"
		}
	},
	"variables": {
		"workspaceId": "[concat('Microsoft.Synapse/workspaces/', parameters('workspaceName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('workspaceName'), '/Copy Data from REST API to ADLS')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Get Total count of Records",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Set-AccessToken",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "@pipeline().parameters.TotalCountURL",
								"type": "Expression"
							},
							"connectVia": {
								"referenceName": "AutoResolveIntegrationRuntime",
								"type": "IntegrationRuntimeReference"
							},
							"method": "GET",
							"headers": {
								"Authorization": {
									"value": "@variables('AccessToken')",
									"type": "Expression"
								},
								"Accept": "application/json"
							}
						}
					},
					{
						"name": "Store Total Count",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get Total count of Records",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "TotalCount",
							"value": {
								"value": "@activity('Get Total count of Records').output.ADFWebActivityResponseHeaders['Total-Count']",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Copy Page to ADLS",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Store Total Count",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"additionalHeaders": {
									"Authorization": {
										"value": "@variables('AccessToken')",
										"type": "Expression"
									}
								},
								"paginationRules": {
									"QueryParameters": {
										"value": "Range:0:@{variables('TotalCount')}:500",
										"type": "Expression"
									}
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings",
									"filePattern": "setOfObjects"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "DS_REST",
								"type": "DatasetReference",
								"parameters": {
									"RelativeURL": {
										"value": "@pipeline().parameters.RelativeURL",
										"type": "Expression"
									},
									"ClientId": {
										"value": "@pipeline().parameters.ClientId",
										"type": "Expression"
									},
									"SecretName": {
										"value": "@pipeline().parameters.SecretName",
										"type": "Expression"
									},
									"BaseURL": {
										"value": "@pipeline().parameters.BaseURL",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_JSON",
								"type": "DatasetReference",
								"parameters": {
									"stage": "1",
									"path": {
										"value": "@pipeline().parameters.SinkPath",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Get-AccessToken",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "@pipeline().parameters.AuthURL",
								"type": "Expression"
							},
							"connectVia": {
								"referenceName": "AutoResolveIntegrationRuntime",
								"type": "IntegrationRuntimeReference"
							},
							"method": "POST",
							"headers": {},
							"body": {
								"grant_type": "client_credentials"
							},
							"authentication": {
								"type": "Basic",
								"username": {
									"value": "@pipeline().parameters.ClientID",
									"type": "Expression"
								},
								"password": {
									"type": "AzureKeyVaultSecret",
									"store": {
										"referenceName": "LS_KeyVault_OEA",
										"type": "LinkedServiceReference"
									},
									"secretName": {
										"value": "@pipeline().parameters.SecretName",
										"type": "Expression"
									}
								}
							}
						}
					},
					{
						"name": "Set-AccessToken",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get-AccessToken",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "AccessToken",
							"value": {
								"value": "Bearer @{activity('Get-AccessToken').output.access_token}",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"Limit": {
						"type": "int",
						"defaultValue": 500
					},
					"BaseURL": {
						"type": "string",
						"defaultValue": "https://api.edgraph.dev"
					},
					"TotalCountURL": {
						"type": "String"
					},
					"RelativeURL": {
						"type": "String"
					},
					"ClientId": {
						"type": "String"
					},
					"SecretName": {
						"type": "String"
					},
					"SinkPath": {
						"type": "String"
					},
					"AuthURL": {
						"type": "String"
					}
				},
				"variables": {
					"TotalCount": {
						"type": "String"
					},
					"PageArray": {
						"type": "Array"
					},
					"test": {
						"type": "String"
					},
					"AccessToken": {
						"type": "String"
					}
				},
				"folder": {
					"name": "OEA_Framework/Extracts"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]",
				"[concat(variables('workspaceId'), '/datasets/DS_REST')]",
				"[concat(variables('workspaceId'), '/datasets/DS_JSON')]",
				"[concat(variables('workspaceId'), '/linkedServices/LS_KeyVault_OEA')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DS_JSON')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_OEA",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"stage": {
						"type": "string",
						"defaultValue": "1"
					},
					"path": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@dataset().path",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "stage@{dataset().stage}",
							"type": "Expression"
						}
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_ADLS_OEA')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DS_JSON_File')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_OEA",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"stage": {
						"type": "string",
						"defaultValue": "1"
					},
					"path": {
						"type": "string"
					},
					"fileName": {
						"type": "string",
						"defaultValue": "data.json"
					}
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().fileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().path",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "stage@{dataset().stage}",
							"type": "Expression"
						}
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_ADLS_OEA')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DS_REST')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_REST",
					"type": "LinkedServiceReference",
					"parameters": {
						"ClientId": {
							"value": "@dataset().ClientId",
							"type": "Expression"
						},
						"SecretName": {
							"value": "@dataset().SecretName",
							"type": "Expression"
						},
						"BaseURL": {
							"value": "@dataset().BaseURL",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"RelativeURL": {
						"type": "string"
					},
					"ClientId": {
						"type": "string"
					},
					"SecretName": {
						"type": "string"
					},
					"BaseURL": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {
					"relativeUrl": {
						"value": "@dataset().RelativeURL",
						"type": "Expression"
					}
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_REST')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DS_SQL_Serverless')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_SQL_Serverless_OEA",
					"type": "LinkedServiceReference",
					"parameters": {
						"dbName": {
							"value": "@dataset().dbName",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"dbName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "OEA_Framework"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_SQL_Serverless_OEA')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/LS_ADLS_OEA')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Connection to the OEA data lake",
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('LS_ADLS_OEA_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/LS_HTTP')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Connection to an HTTP endpoint.\nThe baseURL parameter must be passed in from the dataset that utilizes this linked service.",
				"parameters": {
					"baseURL": {
						"type": "string",
						"defaultValue": "https://edfiodsapiwebsite-production-3rdql7wdxvrb2.azurewebsites.net"
					},
					"clientID": {
						"type": "string",
						"defaultValue": "nprmYc4GBokQ"
					}
				},
				"annotations": [],
				"type": "HttpServer",
				"typeProperties": {
					"url": "[parameters('LS_HTTP_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Basic",
					"userName": "[parameters('LS_HTTP_properties_typeProperties_userName')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "LS_KeyVault_OEA",
							"type": "LinkedServiceReference"
						},
						"secretName": "EdFi-Client-Secret"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]",
				"[concat(variables('workspaceId'), '/linkedServices/LS_KeyVault_OEA')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/LS_KeyVault_OEA')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('LS_KeyVault_OEA_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/LS_REST')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"ClientId": {
						"type": "string"
					},
					"SecretName": {
						"type": "string"
					},
					"BaseURL": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('LS_REST_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Basic",
					"userName": "[parameters('LS_REST_properties_typeProperties_userName')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "LS_KeyVault_OEA",
							"type": "LinkedServiceReference"
						},
						"secretName": {
							"value": "@linkedService().SecretName",
							"type": "Expression"
						}
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]",
				"[concat(variables('workspaceId'), '/linkedServices/LS_KeyVault_OEA')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/LS_SQL_Serverless_OEA')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"dbName": {
						"type": "string",
						"defaultValue": "master"
					}
				},
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('LS_SQL_Serverless_OEA_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/syn-oea-agtest-WorkspaceDefaultSqlServer')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"DBName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('syn-oea-agtest-WorkspaceDefaultSqlServer_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/syn-oea-agtest-WorkspaceDefaultStorage')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('syn-oea-agtest-WorkspaceDefaultStorage_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AutoResolveIntegrationRuntime')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 0
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/edfi_delete')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "EdFi/Ingest"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "LS_ADLS_OEA",
								"type": "LinkedServiceReference"
							},
							"name": "SourceJson"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "LS_ADLS_OEA",
								"type": "LinkedServiceReference"
							},
							"name": "SinkDelta"
						}
					],
					"transformations": [
						{
							"name": "AlterRow"
						},
						{
							"name": "DerivedColumn"
						},
						{
							"name": "SelectColumns"
						}
					],
					"scriptLines": [
						"parameters{",
						"     districtId as string ('255901'),",
						"     schoolYear as string ('2017'),",
						"     entity as string ('schools'),",
						"     directory as string ('EdFi'),",
						"     apiversion as string ('5.3')",
						"}",
						"source(useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     limit: 10000,",
						"     ignoreNoFilesFound: true,",
						"     enableCdc: true,",
						"     mode: 'read',",
						"     skipInitialLoad: false,",
						"     format: 'json',",
						"     fileSystem: 'stage1',",
						"     folderPath: (\"Transactional/{$directory}/v5.3/DistrictId={$districtId}/SchoolYear={$schoolYear}/{$entity}/Incremental/Deletes\"),",
						"     documentForm: 'documentPerLine') ~> SourceJson",
						"SelectColumns alterRow(deleteIf(true())) ~> AlterRow",
						"SourceJson derive(lake_id = concatWS('_', $schoolYear, $districtId, toString(byName('id'))),",
						"          DistrictId = $districtId,",
						"          SchoolYear = $schoolYear) ~> DerivedColumn",
						"DerivedColumn select(mapColumn(",
						"          each(match(name!='rundate'))",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectColumns",
						"AlterRow sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     fileSystem: 'workspace',",
						"     folderPath: (\"Ingested/{$directory}/v{$apiversion}/{$entity}\"),",
						"     mergeSchema: (true()),",
						"     autoCompact: false,",
						"     optimizedWrite: false,",
						"     vacuum: 0,",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:true,",
						"     upsertable:false,",
						"     keys:['lake_id'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('key',",
						"          0,",
						"          DistrictId,",
						"          SchoolYear",
						"     )) ~> SinkDelta"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_ADLS_OEA')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/edfi_upsert')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "EdFi/Ingest"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "LS_ADLS_OEA",
								"type": "LinkedServiceReference"
							},
							"name": "SourceJson"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "LS_ADLS_OEA",
								"type": "LinkedServiceReference"
							},
							"name": "SinkDelta"
						}
					],
					"transformations": [
						{
							"name": "AlterRow"
						},
						{
							"name": "DerivedColumn"
						},
						{
							"name": "SelectColumns"
						}
					],
					"scriptLines": [
						"parameters{",
						"     districtId as string ('255901'),",
						"     schoolYear as string ('2017'),",
						"     entity as string ('schools'),",
						"     directory as string ('EdFi'),",
						"     apiversion as string ('5.3')",
						"}",
						"source(useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     inferDriftedColumnTypes: true,",
						"     limit: 10000,",
						"     ignoreNoFilesFound: true,",
						"     enableCdc: true,",
						"     mode: 'read',",
						"     skipInitialLoad: false,",
						"     format: 'json',",
						"     fileSystem: 'stage1',",
						"     folderPath: (\"Transactional/{$directory}/v5.3/DistrictId={$districtId}/SchoolYear={$schoolYear}/{$entity}/Incremental/Upserts\"),",
						"     documentForm: 'documentPerLine',",
						"     preferredIntegralType: 'integer',",
						"     preferredFractionalType: 'float') ~> SourceJson",
						"SelectColumns alterRow(upsertIf(true())) ~> AlterRow",
						"SourceJson derive(SchoolYear = $schoolYear,",
						"          DistrictId = $districtId,",
						"          LastModifiedDate = currentTimestamp(),",
						"          lake_id = concatWS('_', $schoolYear, $districtId, toString(byName('id')))) ~> DerivedColumn",
						"DerivedColumn select(mapColumn(",
						"          each(match(name!='rundate'))",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectColumns",
						"AlterRow sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     fileSystem: 'stage2',",
						"     folderPath: (\"Ingested/{$directory}/v{$apiversion}/{$entity}\"),",
						"     mergeSchema: (true()),",
						"     autoCompact: false,",
						"     optimizedWrite: false,",
						"     vacuum: 0,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['lake_id'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('key',",
						"          0,",
						"          DistrictId,",
						"          SchoolYear",
						"     )) ~> SinkDelta"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/LS_ADLS_OEA')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Refine_EdFi')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "EdFi"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "49f96b1f-ba82-4b0c-a2b3-ca9c07479f42"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"%run /OEAp7_py"
						],
						"outputs": [],
						"execution_count": 23
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"%run /OpenAPIUtil_py"
						],
						"outputs": [],
						"execution_count": 24
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Pass the below parameters from pipeline. \r\n",
							"# directory = 'EdFi'\r\n",
							"# api_version = '5.3'\r\n",
							"# metadata_url = 'https://raw.githubusercontent.com/microsoft/OpenEduAnalytics/gene/v0.7dev/modules/module_catalog/Ed-Fi/docs/edfi_oea_metadata.csv'\r\n",
							"# swagger_url = 'https://raw.githubusercontent.com/microsoft/OpenEduAnalytics/gene/v0.7dev//modules/module_catalog/Ed-Fi/docs/edfi_swagger.json'\r\n",
							"\r\n",
							"oea = OEA(storage_account='stoeacisdedfi1')\r\n",
							"oea_metadatas = oea.get_metadata_from_url(metadata_url)\r\n",
							"primitive_datatypes = ['timestamp', 'date', 'decimal', 'boolean', 'integer', 'string', 'long']\r\n",
							"\r\n",
							"schema_gen = OpenAPIUtil(swagger_url)\r\n",
							"schemas = schema_gen.create_spark_schemas()\r\n",
							"\r\n",
							"stage2_ingested = oea.to_url(f'stage2/Ingested/{directory}/v{api_version}')\r\n",
							"stage2_refined = oea.to_url(f'stage2/Refined/{directory}/v{api_version}')"
						],
						"outputs": [],
						"execution_count": 25
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"def get_descriptor_schema(descriptor):\r\n",
							"    fields = []\r\n",
							"    fields.append(StructField('_etag',LongType(), True))\r\n",
							"    fields.append(StructField(f\"{descriptor[:-1]}Id\", IntegerType(), True))\r\n",
							"    fields.append(StructField('codeValue',StringType(), True))\r\n",
							"    fields.append(StructField('description',StringType(), True))\r\n",
							"    fields.append(StructField('id',StringType(), True))\r\n",
							"    fields.append(StructField('namespace',StringType(), True))\r\n",
							"    fields.append(StructField('shortDescription',StringType(), True))\r\n",
							"    return StructType(fields)\r\n",
							"\r\n",
							"def get_descriptor_metadata(descriptor):\r\n",
							"    return [['_etag', 'long', 'no-op'],\r\n",
							"            [f\"{descriptor[:-1]}Id\", 'integer', 'hash'],\r\n",
							"            ['codeValue','string', 'no-op'],\r\n",
							"            ['description','string', 'no-op'],\r\n",
							"            ['id','string', 'no-op'],\r\n",
							"            ['namespace','string', 'no-op'],\r\n",
							"            ['shortDescription','string', 'no-op']]"
						],
						"outputs": [],
						"execution_count": 26
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"def transform(df, target_schema):\r\n",
							"    for col_name in target_schema.fieldNames():\r\n",
							"        target_col = target_schema[col_name]\r\n",
							"        if col_name in df.columns and target_col.dataType.typeName() in primitive_datatypes:\r\n",
							"            # Primitive data types\r\n",
							"            df = df.withColumn(col_name, f.col(col_name).cast(target_col.dataType))\r\n",
							"            continue\r\n",
							"        elif col_name not in df.columns:\r\n",
							"            # If Column not present in dataframe, Add column with None values.\r\n",
							"            df = df.withColumn(col_name, f.lit(None).cast(target_col.dataType))\r\n",
							"            continue\r\n",
							"        \r\n",
							"        df = df.withColumn(f\"{col_name}_json\", f.to_json(f.col(col_name)))\\\r\n",
							"                    .withColumn(col_name, f.from_json(f.col(f\"{col_name}_json\"), target_col.dataType))\\\r\n",
							"                    .drop(f\"{col_name}_json\")\r\n",
							"        \r\n",
							"        # Modify the links with surrogate keys\r\n",
							"        if target_col.dataType.typeName() == 'struct' and 'link' in target_col.dataType.names:\r\n",
							"            df = df.withColumn(f\"{col_name.replace('Reference', '')}_lake_id\", f.concat_ws('_', f.col('SchoolYear')\\\r\n",
							"                              , f.col('DistrictId')\\\r\n",
							"                              , f.split(f.col(f'{col_name}.link.href'), '/').getItem(3)))\r\n",
							"        \r\n",
							"        if target_col.dataType.typeName() == 'array':\r\n",
							"            for field in [field for field in target_col.dataType.elementType.fields if field.dataType.typeName() == 'struct']:\r\n",
							"                if 'link' in field.dataType.names:\r\n",
							"                    df = df.withColumn(col_name, f.transform(col_name, lambda x: x.withField(f\"{(field.name).replace('Reference', '')}_lake_id\", f.concat_ws(\"_\"\\\r\n",
							"                                                                                                                    , f.col(\"SchoolYear\")\\\r\n",
							"                                                                                                                    , f.col(\"DistrictId\")\\\r\n",
							"                                                                                                                   , f.split(x[field.name].link.href, \"/\").getItem(3)))))\r\n",
							"        \r\n",
							"        if 'x-Ed-Fi-explode' in target_col.metadata and target_col.metadata['x-Ed-Fi-explode']:\r\n",
							"            # Handle array type objects which needs to be exploded.\r\n",
							"            cols = df.columns + [\"exploded.*\"]\r\n",
							"            df = df.withColumn(\"exploded\", f.explode(col_name)).select(cols).drop(col_name)\r\n",
							"\r\n",
							"        elif 'x-Ed-Fi-fields-to-pluck' in target_col.metadata and target_col.metadata['x-Ed-Fi-fields-to-pluck'] != [\"*\"]:\r\n",
							"            # Handle complex objects which needs flattening.\r\n",
							"            for sub_col in target_col.metadata['x-Ed-Fi-fields-to-pluck']:\r\n",
							"                df = df.withColumn(sub_col, f.col(f\"{col_name}.{sub_col}\"))\r\n",
							"            df = df.drop(col_name)\r\n",
							"    return df\r\n",
							"df = transform(df, target_schema)"
						],
						"outputs": [],
						"execution_count": 41
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# for table_name in [x.name for x in mssparkutils.fs.ls(stage2_ingested) if x.isDir]:\r\n",
							"for table_name in [\"courses\"]:\r\n",
							"    print(f\"Processing {table_name}\")\r\n",
							"    # 1. Read Delta table from Ingested Folder.\r\n",
							"    df = spark.read.format('delta').load(f\"{stage2_ingested}/{table_name}\")\r\n",
							"    \r\n",
							"    # 2. Transformation step\r\n",
							"    if(re.search('Descriptors$', table_name) is None):\r\n",
							"        target_schema = schemas[table_name]\r\n",
							"        oea_metadata = oea_metadatas[table_name]\r\n",
							"    else:\r\n",
							"        target_schema = get_descriptor_schema(table_name)\r\n",
							"        oea_metadata = get_descriptor_metadata(table_name)\r\n",
							"    target_schema = target_schema.add(StructField('DistrictId', StringType()))\\\r\n",
							"                                        .add(StructField('SchoolYear', StringType()))\\\r\n",
							"                                        .add(StructField('LastModifiedDate', TimestampType()))\r\n",
							"    oea_metadata += [['DistrictId', 'string', 'partition-by'],\r\n",
							"                     ['SchoolYear', 'string', 'partition-by'],\r\n",
							"                     ['LastModifiedDate', 'timestamp', 'no-op']]\r\n",
							"    # target_schema['localEducationAgencyReference'].metadata['x-Ed-Fi-compute-lake-ids'] = True\r\n",
							"    # target_schema['localEducationAgencyReference'].metadata['x-Ed-Fi-fields-to-pluck'] = ['*']\r\n",
							"    try:\r\n",
							"        df = transform(df, target_schema)\r\n",
							"    except(e):\r\n",
							"        print(f\"Error while Transforming {table_name}: {str(e)}\")\r\n",
							"    \r\n",
							"    # 3. Pseudonymize the data using metadata.\r\n",
							"    try:\r\n",
							"        df_pseudo, df_lookup = oea.pseudonymize(df, oea_metadata)\r\n",
							"    except(e):\r\n",
							"        print(f\"Error while Pseudonymizing {table_name}: {str(e)}\")\r\n",
							"\r\n",
							"    # 4. Write to Refined folder.\r\n",
							"    if(len(df_pseudo.columns) > 2):\r\n",
							"        df_pseudo.write.format('delta').mode('overwrite').option('overwriteSchema', 'true').partitionBy('DistrictId', 'SchoolYear').save(f\"{stage2_refined}/General/{table_name}\")\r\n",
							"    if(len(df_lookup.columns) > 2):\r\n",
							"        df_lookup.write.format('delta').mode('overwrite').option('overwriteSchema', 'true').partitionBy('DistrictId', 'SchoolYear').save(f\"{stage2_refined}/Sensitive/{table_name}\")\r\n",
							""
						],
						"outputs": [],
						"execution_count": 43
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							""
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/spark3p1sm')]",
			"type": "Microsoft.Synapse/workspaces/bigDataPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"autoPause": {
					"enabled": true,
					"delayInMinutes": 15
				},
				"autoScale": {
					"enabled": true,
					"maxNodeCount": 5,
					"minNodeCount": 3
				},
				"nodeCount": 3,
				"nodeSize": "Small",
				"nodeSizeFamily": "MemoryOptimized",
				"sparkVersion": "3.1",
				"isComputeIsolationEnabled": false,
				"sessionLevelPackagesEnabled": false,
				"annotations": []
			},
			"dependsOn": [],
			"location": "westus"
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Land_All_Entities_to_Stage1_copy1')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Update ChangeVersion",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET"
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "DS_REST",
								"type": "DatasetReference",
								"parameters": {
									"RelativeURL": {
										"value": "edfi/v@{pipeline().parameters.ApiVersion}/saas/core/changequeries/v1/@{pipeline().parameters.InstanceId}/@{pipeline().parameters.SchoolYear}/availableChangeVersions",
										"type": "Expression"
									},
									"ClientId": {
										"value": "@pipeline().parameters.ClientID",
										"type": "Expression"
									},
									"SecretName": {
										"value": "@pipeline().parameters.SecretName",
										"type": "Expression"
									},
									"BaseURL": {
										"value": "@pipeline().parameters.BaseURL",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_JSON_File",
								"type": "DatasetReference",
								"parameters": {
									"stage": "1",
									"path": {
										"value": "Landing/Transactional/@{pipeline().parameters.Directory}/v@{pipeline().parameters.ApiVersion}/DistrictId=@{pipeline().parameters.DistrictId}/SchoolYear=@{pipeline().parameters.SchoolYear}",
										"type": "Expression"
									},
									"fileName": "ChangeVersion.json"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"ClientID": {
						"type": "string",
						"defaultValue": "vNaqQSu6q84STOXT"
					},
					"BaseURL": {
						"type": "string",
						"defaultValue": "https://api.edgraph.dev"
					},
					"Directory": {
						"type": "string",
						"defaultValue": "EdFi"
					},
					"SecretName": {
						"type": "string",
						"defaultValue": "EdFi-Client-Secret-2017"
					},
					"SchoolYear": {
						"type": "string",
						"defaultValue": "2017"
					},
					"InstanceId": {
						"type": "string",
						"defaultValue": "a01eaead-bc82-4e18-8b63-b1aa4af3bba1"
					},
					"ApiVersion": {
						"type": "string",
						"defaultValue": "5.3"
					},
					"isInitialLoad": {
						"type": "bool",
						"defaultValue": true
					},
					"DistrictId": {
						"type": "string"
					}
				},
				"variables": {
					"AccessToken": {
						"type": "String"
					},
					"MinChangeVersion": {
						"type": "String"
					},
					"MaxChangeVersion": {
						"type": "String"
					},
					"FolderName": {
						"type": "String"
					},
					"DescriptorList": {
						"type": "Array"
					},
					"PipelineName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "EdFi/Single District Per Instance"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/DS_REST')]",
				"[concat(variables('workspaceId'), '/datasets/DS_JSON_File')]"
			]
		}
	]
}