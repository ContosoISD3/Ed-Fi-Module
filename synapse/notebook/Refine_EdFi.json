{
	"name": "Refine_EdFi",
	"properties": {
		"folder": {
			"name": "EdFi"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "316a72d6-3f78-4060-ba9c-aab5cbef879c"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"%run /OEA_py"
				],
				"execution_count": 80
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Pass the below parameters from pipeline. \r\n",
					"directory = 'Ed-Fi'\r\n",
					"api_version = '5.2'\r\n",
					"metadata_url = 'https://raw.githubusercontent.com/microsoft/OpenEduAnalytics/main/modules/module_catalog/Ed-Fi/docs/edfi_oea_metadata.csv'\r\n",
					"swagger_url = 'https://raw.githubusercontent.com/microsoft/OpenEduAnalytics/main/modules/module_catalog/Ed-Fi/docs/edfi_swagger.json'\r\n",
					"\r\n",
					"oea = OEA()\r\n",
					"oea_metadatas = oea.get_metadata_from_url(metadata_url)\r\n",
					"primitive_datatypes = ['timestamp', 'date', 'decimal', 'boolean', 'integer', 'string', 'long']\r\n",
					"\r\n",
					"schema_gen = OpenAPIUtil(swagger_url)\r\n",
					"schemas = schema_gen.create_spark_schemas()\r\n",
					"\r\n",
					"stage2_ingested = oea.to_url(f'stage2/Ingested/{directory}/v{api_version}')\r\n",
					"stage2_refined = oea.to_url(f'stage2/Refined/{directory}/v{api_version}')"
				],
				"execution_count": 87
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def get_descriptor_schema(descriptor):\r\n",
					"    fields = []\r\n",
					"    fields.append(StructField('_etag',LongType(), True))\r\n",
					"    fields.append(StructField(f\"{descriptor[:-1]}Id\", IntegerType(), True))\r\n",
					"    fields.append(StructField('codeValue',StringType(), True))\r\n",
					"    fields.append(StructField('description',StringType(), True))\r\n",
					"    fields.append(StructField('id',StringType(), True))\r\n",
					"    fields.append(StructField('namespace',StringType(), True))\r\n",
					"    fields.append(StructField('shortDescription',StringType(), True))\r\n",
					"    return StructType(fields)\r\n",
					"\r\n",
					"def get_descriptor_metadata(descriptor):\r\n",
					"    return [['_etag', 'long', 'no-op'],\r\n",
					"            [f\"{descriptor[:-1]}Id\", 'integer', 'hash'],\r\n",
					"            ['codeValue','string', 'no-op'],\r\n",
					"            ['description','string', 'no-op'],\r\n",
					"            ['id','string', 'no-op'],\r\n",
					"            ['namespace','string', 'no-op'],\r\n",
					"            ['shortDescription','string', 'no-op']]"
				],
				"execution_count": 88
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def flatten_reference_col(df, target_col):\r\n",
					"    col_prefix = target_col.name.replace('Reference', '')\r\n",
					"    \"\"\"for sub_col in [x for x in target_col.dataType.names if x != 'link']:\r\n",
					"        df = df.withColumn(f\"{col_prefix}_{sub_col}\", f.col(f\"{target_col.name}.{sub_col}\"))\"\"\"\r\n",
					"    df = df.withColumn(f\"{col_prefix}_lake_id\", f.concat_ws('_', f.col('SchoolYear')\\\r\n",
					"                              , f.col('DistrictId')\\\r\n",
					"                              , f.split(f.col(f'{target_col.name}.link.href'), '/').getItem(3)))\r\n",
					"    df = df.drop(target_col.name)\r\n",
					"    return df\r\n",
					"\r\n",
					"def explode_arrays(df, target_col, schema_name, table_name):\r\n",
					"    cols = ['lake_id', 'DistrictId', 'SchoolYear']\r\n",
					"    child_df = df.select(cols + [target_col.name])\r\n",
					"    child_df = child_df.withColumn(\"exploded\", f.explode(target_col.name)).drop(target_col.name).select(cols + ['exploded.*'])\r\n",
					"    for ref_col in [x for x in child_df.columns if re.search('Reference$', x) is not None]:\r\n",
					"        child_df = flatten_reference_col(child_df, target_col.dataType.elementType[ref_col])\r\n",
					"    \r\n",
					"    for array_sub_col in [x.name for x in target_col.dataType.elementType.fields if x.dataType.typeName() == 'array' ]:\r\n",
					"        cols_to_include = [x for x in child_df.columns if '_lake_id' in x] + cols + [array_sub_col]\r\n",
					"        array_child_df = child_df.select(cols_to_include)\r\n",
					"        array_child_df = array_child_df.withColumn('array_exploded', f.explode(array_sub_col)).select(cols_to_include + ['array_exploded.*']).drop(array_sub_col)\r\n",
					"    \r\n",
					"        array_child_df.withColumnRenamed('lake_id', f\"{table_name}_lake_id\").write.format('delta').mode('overwrite').option('overwriteSchema', 'true').partitionBy('DistrictId', 'SchoolYear')\\\r\n",
					"                .save(f\"{stage2_refined}/General/{schema_name}/{table_name}_{target_col.name}_{array_sub_col}\")\r\n",
					"        child_df = child_df.drop(array_sub_col)\r\n",
					"    child_df.withColumnRenamed('lake_id', f\"{table_name}_lake_id\").write.format('delta').mode('overwrite').option('overwriteSchema', 'true').partitionBy('DistrictId', 'SchoolYear')\\\r\n",
					"                .save(f\"{stage2_refined}/General/{schema_name}/{table_name}_{target_col.name}\")\r\n",
					"    df = df.drop(target_col.name)\r\n",
					"    return df\r\n",
					"\r\n",
					"        \r\n",
					"def transform(df, target_schema, schema_name, table_name):\r\n",
					"    if re.search('Descriptor$', table_name) is not None:\r\n",
					"        df = df.withColumn('lake_id', f.concat(f.col('SchoolYear'), f.lit('_'), f.col('DistrictId')\\\r\n",
					"                , f.lit('_'), f.col('namespace'), f.lit('#'), f.col('codeValue')))\r\n",
					"    else:\r\n",
					"        df = df.withColumn('lake_id', f.concat_ws('_', f.col('SchoolYear'), f.col('DistrictId'), f.col('id')))\r\n",
					"    \r\n",
					"    for col_name in target_schema.fieldNames():\r\n",
					"        target_col = target_schema[col_name]\r\n",
					"        if col_name in df.columns and target_col.dataType.typeName() in primitive_datatypes:\r\n",
					"            # Primitive data types\r\n",
					"            df = df.withColumn(col_name, f.col(col_name).cast(target_col.dataType))\r\n",
					"            continue\r\n",
					"        elif col_name not in df.columns:\r\n",
					"            # If Column not present in dataframe, Add column with None values.\r\n",
					"            df = df.withColumn(col_name, f.lit(None).cast(target_col.dataType))\r\n",
					"            continue\r\n",
					"        \r\n",
					"        df = df.withColumn(f\"{col_name}_json\", f.to_json(f.col(col_name)))\\\r\n",
					"                    .withColumn(col_name, f.from_json(f.col(f\"{col_name}_json\"), target_col.dataType))\\\r\n",
					"                    .drop(f\"{col_name}_json\")\r\n",
					"        \r\n",
					"        # Modify the links with surrogate keys\r\n",
					"        if re.search('Reference$', col_name) is not None:\r\n",
					"            df = flatten_reference_col(df, target_col)\r\n",
					"        \r\n",
					"        if target_col.dataType.typeName() == 'array':\r\n",
					"            df = explode_arrays(df, target_col, schema_name, table_name)\r\n",
					"    return df\r\n",
					"#df = transform(df, target_schema, schema_name, table_name)"
				],
				"execution_count": 132
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"for schema_name in [x.name for x in mssparkutils.fs.ls(stage2_ingested) if x.isDir]:\r\n",
					"    print(f\"Processing schema: {schema_name}\")\r\n",
					"    \r\n",
					"    for table_name in [y.name for y in mssparkutils.fs.ls(f\"{stage2_ingested}/{schema_name}\") if y.isDir]:\r\n",
					"        print(f\"Processing schema/table: {schema_name}/{table_name}\")\r\n",
					"    \r\n",
					"        # 1. Read Delta table from Ingested Folder.\r\n",
					"        df = spark.read.format('delta').load(f\"{stage2_ingested}/{schema_name}/{table_name}\")\r\n",
					"        if len(df.columns) == 3:\r\n",
					"            print(f\"No Data to process.\")\r\n",
					"            continue\r\n",
					"\r\n",
					"        # 2. Transformation step\r\n",
					"        if(re.search('Descriptors$', table_name) is None):\r\n",
					"            target_schema = schemas[table_name]\r\n",
					"            oea_metadata = oea_metadatas[table_name]\r\n",
					"        else:\r\n",
					"            target_schema = get_descriptor_schema(table_name)\r\n",
					"            oea_metadata = get_descriptor_metadata(table_name)\r\n",
					"        target_schema = target_schema.add(StructField('DistrictId', StringType()))\\\r\n",
					"                                     .add(StructField('SchoolYear', StringType()))\\\r\n",
					"                                     .add(StructField('LastModifiedDate', TimestampType()))\r\n",
					"        oea_metadata += [['DistrictId', 'string', 'partition-by'],\r\n",
					"                        ['SchoolYear', 'string', 'partition-by'],\r\n",
					"                        ['LastModifiedDate', 'timestamp', 'no-op']]\r\n",
					"        try:\r\n",
					"            df = transform(df, target_schema, schema_name, table_name)\r\n",
					"        except:\r\n",
					"            print(f\"Error while Transforming {schema_name}/{table_name}\")\r\n",
					"        \r\n",
					"        # 3. Pseudonymize the data using metadata.\r\n",
					"        try:\r\n",
					"            df_pseudo, df_lookup = oea.pseudonymize(df, oea_metadata)\r\n",
					"        except:\r\n",
					"            print(f\"Error while Pseudonymizing {schema_name}/{table_name}\")\r\n",
					"\r\n",
					"        # 4. Write to Refined folder.\r\n",
					"        if(len(df_pseudo.columns) > 2):\r\n",
					"            df_pseudo.write.format('delta').mode('overwrite').option('overwriteSchema', 'true').partitionBy('DistrictId', 'SchoolYear').save(f\"{stage2_refined}/General/{schema_name}/{table_name}\")\r\n",
					"        if(len(df_lookup.columns) > 2):\r\n",
					"            df_lookup.write.format('delta').mode('overwrite').option('overwriteSchema', 'true').partitionBy('DistrictId', 'SchoolYear').save(f\"{stage2_refined}/Sensitive/{schema_name}/{table_name}\")\r\n",
					""
				],
				"execution_count": null
			}
		]
	}
}